const arduinoTutorialsData = [
  {
    id: 1,
    title: "Blinking the builtin LED",
    image: "https://i.ytimg.com/vi/PcusGFga46U/mqdefault.jpg",
    youtubeLink: "https://www.youtube.com/watch?v=PCusGFga46U",
    description:
      "Get started by blinking the onboard LED using basic digitalWrite commands.",
    tutorialGoals: [
      "Blinking the onboard LED",
      "Working with the Arduino IDE",
      "Knowing how to upload a sketch to your Arduino",
    ],
    componentsNeeded: ["1× Arduino", "1× USB cable", "1× Computer"],
  },
  {
    id: 2,
    title: "Blinking LED on breadboard",
    image: "https://i.ytimg.com/vi/Smfzx4WBb9o/mqdefault.jpg",
    youtubeLink: "https://www.youtube.com/watch?v=Smfzx4WBb9o",
    description:
      "Connect an LED and resistor on a breadboard and control it with Arduino.",
    tutorialGoals: [
      "Wiring an LED to the breadboard",
      "Using digitalWrite in Arduino code",
      "Controlling delays in a loop",
    ],
    componentsNeeded: [
      "1× Arduino",
      "1× USB cable",
      "1× Breadboard",
      "1× LED",
      "1× 220Ω resistor",
      "2× Jumper wires",
    ],
  },
  {
    id: 3,
    title: "Fading LED with PWM",
    image: "https://i.ytimg.com/vi/1fhRf-0RxyQ/mqdefault.jpg",
    youtubeLink: "https://www.youtube.com/watch?v=1fhRf-0RxyQ",
    description: "Use PWM to smoothly fade an LED’s brightness up and down.",
    tutorialGoals: [
      "Understanding analogWrite and PWM",
      "Creating a fade-in and fade-out loop",
      "Controlling brightness with code",
    ],
    componentsNeeded: [
      "1× Arduino",
      "1× USB cable",
      "1× Breadboard",
      "1× LED",
      "1× 220Ω resistor",
      "2× Jumper wires",
    ],
  },
  {
    id: 4,
    title: "Control blinking speed with potentiometer",
    image: "https://i.ytimg.com/vi/3hGEusmU-vQ/mqdefault.jpg",
    youtubeLink: "https://www.youtube.com/watch?v=3hGEusmU-vQ",
    description:
      "Use a potentiometer to adjust the speed of a blinking LED in real time.",
    tutorialGoals: [
      "Reading analog values from potentiometer",
      "Mapping values to delay time",
      "Dynamically controlling blink rate",
    ],
    componentsNeeded: [
      "1× Arduino",
      "1× USB cable",
      "1× Breadboard",
      "1× LED",
      "1× 220Ω resistor",
      "1× Potentiometer",
      "3× Jumper wires",
    ],
  },
  {
    id: 5,
    title: "Control LED with pushbutton on Arduino",
    image: "https://i.ytimg.com/vi/5aR0cHKc-JA/mqdefault.jpg",
    youtubeLink: "https://www.youtube.com/watch?v=5aR0cHKc-JA",
    description: "Turn an LED on and off using a pushbutton input.",
    tutorialGoals: [
      "Reading digital input",
      "Controlling output using button state",
      "Using conditional statements in code",
    ],
    componentsNeeded: [
      "1× Arduino",
      "1× USB cable",
      "1× Breadboard",
      "1× LED",
      "1× 220Ω resistor",
      "1× Pushbutton",
      "1× 10 kΩ resistor",
      "4× Jumper wires",
    ],
  },
  {
    id: 6,
    title: "Reading 1-wire DS18B20 temperature sensor",
    image: "https://i.ytimg.com/vi/NknCz0vC-RY/mqdefault.jpg",
    youtubeLink: "https://www.youtube.com/watch?v=NknCz0vC-RY",
    description:
      "Read temperature from the DS18B20 sensor using the OneWire protocol.",
    tutorialGoals: [
      "Interfacing with DS18B20",
      "Reading temperature data",
      "Using 1-Wire and DallasTemperature libraries",
    ],
    componentsNeeded: [
      "1× Arduino",
      "1× USB cable",
      "1× Breadboard",
      "1× DS18B20 sensor",
      "1× 4.7 kΩ resistor",
      "3× Jumper wires",
    ],
  },
  {
    id: 7,
    title: "HC-SR04 ultrasonic distance sensor",
    image: "https://i.ytimg.com/vi/nkSUFV7gCNU/mqdefault.jpg",
    youtubeLink: "https://www.youtube.com/watch?v=nkSUFV7gCNU",
    description:
      "Measure distances using sound waves with the HC‑SR04 ultrasonic sensor.",
    tutorialGoals: [
      "Connecting HC‑SR04 to Arduino",
      "Measuring distance in cm",
      "Using pulseIn for timing",
    ],
    componentsNeeded: [
      "1× Arduino",
      "1× USB cable",
      "1× Breadboard",
      "1× HC‑SR04 sensor",
      "4× Jumper wires",
    ],
  },
  {
    id: 8,
    title: "Analog PS2 joystick with push button",
    image: "https://i.ytimg.com/vi/AJLcq93glp0/mqdefault.jpg",
    youtubeLink: "https://www.youtube.com/watch?v=AJLcq93glp0",
    description:
      "Read X/Y movement and button presses from a PS2 joystick module.",
    tutorialGoals: [
      "Reading analog X/Y axis",
      "Detecting push button press",
      "Interpreting joystick input",
    ],
    componentsNeeded: [
      "1× Arduino",
      "1× USB cable",
      "1× Breadboard",
      "1× PS2 joystick module",
      "5× Jumper wires",
    ],
  },
  {
    id: 9,
    title: "Infrared receiver with remote",
    image: "https://i.ytimg.com/vi/IYYOoyjQS-8/mqdefault.jpg",
    youtubeLink: "https://www.youtube.com/watch?v=IYYOoyjQS-8",
    description:
      "Use an IR receiver to detect remote-button presses with Arduino.",
    tutorialGoals: [
      "Receiving IR signals",
      "Using the IRremote library",
      "Decoding button presses",
    ],
    componentsNeeded: [
      "1× Arduino",
      "1× USB cable",
      "1× Breadboard",
      "1× IR receiver module",
      "1× IR remote",
      "3× Jumper wires",
    ],
  },
  {
    id: 10,
    title: "Sound from a piezo buzzer / speaker",
    image: "https://i.ytimg.com/vi/Ga-QI4166wI/mqdefault.jpg",
    youtubeLink: "https://www.youtube.com/watch?v=Ga-QI4166wI",
    description:
      "Generate tones and melodies using a piezo buzzer or small speaker.",
    tutorialGoals: [
      "Using tone() and noTone() functions",
      "Controlling sound frequency",
      "Creating simple melodies",
    ],
    componentsNeeded: [
      "1× Arduino",
      "1× USB cable",
      "1× Breadboard",
      "1× Piezo buzzer",
      "2× Jumper wires",
    ],
  },
  {
    id: 11,
    title: "I2C LCD with text and symbols",
    image: "https://i.ytimg.com/vi/SNt3UsMEqc8/mqdefault.jpg",
    youtubeLink: "https://www.youtube.com/watch?v=SNt3UsMEqc8",
    description: "Display text or custom symbols on an I2C LCD display.",
    tutorialGoals: [
      "Connecting LCD via I2C",
      "Using LiquidCrystal_I2C library",
      "Displaying messages and symbols",
    ],
    componentsNeeded: [
      "1× Arduino",
      "1× USB cable",
      "1× Breadboard",
      "1× I2C LCD (16×2)",
      "4× Jumper wires",
    ],
  },
  {
    id: 12,
    title: "Rotary encoder and interrupts",
    image: "https://i.ytimg.com/vi/gPLpPFmv-Zc/mqdefault.jpg",
    youtubeLink: "https://www.youtube.com/watch?v=gPLpPFmv-Zc",
    description: "Read rotary encoder movements using interrupt-based code.",
    tutorialGoals: [
      "Connecting rotary encoder",
      "Using interrupts in Arduino",
      "Detecting rotation direction and steps",
    ],
    componentsNeeded: [
      "1× Arduino",
      "1× USB cable",
      "1× Breadboard",
      "1× Rotary encoder module",
      "3× Jumper wires",
    ],
  },
  {
    id: 13,
    title: "DHT11 humidity and temperature sensor",
    image: "https://i.ytimg.com/vi/lrDl8NhMwQw/mqdefault.jpg",
    youtubeLink: "https://www.youtube.com/watch?v=lrDl8NhMwQw",
    description: "Read humidity and temperature from the DHT11 sensor module.",
    tutorialGoals: [
      "Interfacing with DHT11",
      "Reading humidity and temperature",
      "Displaying sensor data",
    ],
    componentsNeeded: [
      "1× Arduino",
      "1× USB cable",
      "1× Breadboard",
      "1× DHT11 sensor module",
      "3× Jumper wires",
    ],
  },
  {
    id: 14,
    title: "28BYJ-48 stepper motor with ULN2003 driver",
    image: "https://i.ytimg.com/vi/4iRvjBwAzrM/mqdefault.jpg",
    youtubeLink: "https://www.youtube.com/watch?v=4iRvjBwAzrM",
    description: "Control a 28BYJ-48 stepper using the ULN2003 driver board.",
    tutorialGoals: [
      "Understanding stepper motor control",
      "Wiring ULN2003 driver",
      "Sending step sequences via code",
    ],
    componentsNeeded: [
      "1× Arduino",
      "1× USB cable",
      "1× 28BYJ‑48 stepper motor",
      "1× ULN2003 driver module",
      "Jumper wires",
    ],
  },
  {
    id: 15,
    title: "Long press button",
    image: "https://i.ytimg.com/vi/TD7vjJy0w8U/mqdefault.jpg",
    youtubeLink: "https://www.youtube.com/watch?v=TD7vjJy0w8U",
    description: "Detect and respond to long vs. short button presses.",
    tutorialGoals: [
      "Reading button press duration",
      "Implementing long‑press logic",
    ],
    componentsNeeded: [
      "1× Arduino",
      "1× USB cable",
      "1× Pushbutton",
      "1× 10 kΩ resistor",
      "Breadboard",
      "Jumper wires",
    ],
  },
  {
    id: 16,
    title: "PCF8574 I2C I/O expander with LCD",
    image: "https://i.ytimg.com/vi/aACOC9XBBks/mqdefault.jpg",
    youtubeLink: "https://www.youtube.com/watch?v=UoyhkYbqvq8",
    description: "Expand digital I/O with PCF8574 over I2C for LCD control.",
    tutorialGoals: [
      "Using PCF8574 I/O expander",
      "Driving LCD via expander",
      "Reading/writing multiple pins over I2C",
    ],
    componentsNeeded: [
      "1× Arduino",
      "1× USB cable",
      "1× Breadboard",
      "1× PCF8574 module",
      "1× I2C LCD (16×2)",
      "Jumper wires",
    ],
  },
  {
    id: 17,
    title: "Temperature data logger with SD card",
    image: "https://i.ytimg.com/vi/OXieoH5IsAI/mqdefault.jpg",
    youtubeLink: "https://www.youtube.com/watch?v=Xpr6rGEJ6pk",
    description: "Log temperature data to an SD card for later review.",
    tutorialGoals: [
      "Reading sensor data",
      "Writing to SD card",
      "Formatting data for storage",
    ],
    componentsNeeded: [
      "1× Arduino",
      "1× USB cable",
      "1× SD card module",
      "1× SD card",
      "1× Temperature sensor (DHT11 or DS18B20)",
      "Breadboard",
      "Jumper wires",
    ],
  },
  {
    id: 18,
    title: "MPU6050 accelerometer and gyroscope sensor",
    image: "https://i.ytimg.com/vi/m67vZaXu0zY/mqdefault.jpg",
    youtubeLink: "https://www.youtube.com/watch?v=9y8ScwKN7bI",
    description: "Read motion and orientation data using the MPU6050 sensor.",
    tutorialGoals: [
      "Interfacing MPU6050 via I2C",
      "Reading acceleration & gyroscope data",
      "Interpreting sensor readings",
    ],
    componentsNeeded: [
      "1× Arduino",
      "1× USB cable",
      "1× MPU6050 sensor module",
      "Breadboard",
      "4× Jumper wires",
    ],
  },
];

export default arduinoTutorialsData;
